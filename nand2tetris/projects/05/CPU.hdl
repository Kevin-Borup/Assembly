// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    // Instruction parsin
    // [0] = OpCode, [1..2] = ignore
    
    // [3] = a code in c-instruct
    // [4..9] = comp bits
    
    // [10] = Areg
    // [11] = Dreg
    // [12] = Mmem
    
    // [13] = j1
    // [14] = j2
    // [15] = j3 


    //Instruction Start
    Mux16(a=outAlu, b=instruction, sel=instruction[3], out=insMuxOut);
    
    //A Register
    Register(in=insMuxOut, load=instruction[10], out=aRegOut, out=addressM);

    //D Register
    Register(in=outAlu, load=instruction[11], out=dRegOut);

    // In & Instruction Mux
    Mux16(a=aRegOut, b=inM, sel=instruction[0], out=directAlu);

    // ALU
    ALU(x=dRegOut, y=directAlu, 
        zx=instruction[4], nx=instruction[5], zy=instruction[6], ny=instruction[7], f=instruction[8], no=instruction[9], 
        out=outAlu, out=outM, zr=outZr, ng=outNg);
    

    // PC Counter
    //PC Load
    
    //J1
    Not(in=outZr, out=noutZr);
    Not(in=outNg, out=noutNg);

    And(a=noutZr, b=noutNg, out=andnC);
    And(a=andnC, b=instruction[13], out=outJ1);

    //J2
    And(a=ng, b=instruction[14], out=outJ2);

    //J3
    And(a=zr, b=instruction[15], out=outJ3);

    //Assigning PcLoad
    Or(a=outJ1, b=outJ2, out=orJ12);
    Or(a=orJ12, b=J3, out=orJ123);

    //PC Inc can always be true. For this instance, we aren't interested in getting the same input as out. 
    // If load or reset is defined, it ignores the increment. 
    // If reset or load is 0, then it increments.
    // If reset or load is 1, then it ignores the incremented value.

    PC(in=aRegOut, load=orJ123, inc=true, reset=reset, out=pc);

    //WriteM output
    instruction[12] = writeM;

}