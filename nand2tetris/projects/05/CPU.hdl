// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    // Instruction parsin
    // [15] = OpCode, [13..14] = ignore
    
    // [12] = a code in c-instruct
    // [11..6] = comp bits
    
    // [5] = Areg
    // [4] = Dreg
    // [3] = Mmem
    
    // [2] = j1
    // [1] = j2
    // [0] = j3 
    
    //Instruction Decode
    // A Instruction
    Not(in=instruction[15], out=aInst);
    // C Instruction
    And(a=instruction[14], b=instruction[13], out=cOnes);
    And(a=cOnes, b=instruction[15], out=cInst);
    // Comp
    And (a=cInst, b=instruction[12], out=aComp);
    And (a=cInst, b=instruction[11], out=c1);
    And (a=cInst, b=instruction[10], out=c2);
    And (a=cInst, b=instruction[9],  out=c3);
    And (a=cInst, b=instruction[8],  out=c4);
    And (a=cInst, b=instruction[7],  out=c5);
    And (a=cInst, b=instruction[6],  out=c6);
    // Dest
    And (a=cInst, b=instruction[5],  out=destA);
    And (a=cInst, b=instruction[4],  out=destD);
    And (a=cInst, b=instruction[3],  out=writeM);   // destM
    // Jump
    And (a=cInst, b=instruction[2],  out=jmpLt);
    And (a=cInst, b=instruction[1],  out=jmpEq);
    And (a=cInst, b=instruction[0],  out=jmpGt);


    //Instruction Start
    Mux16(a=outAlu, b=instruction, sel=aInst, out=aIn);
    
    //A Register
    Or(a=aInst, b=destA, out=loadA);
    ARegister(in=aIn, load=loadA, out=aRegOut, out[0..14]=addressM);
    // Register(in=insMuxOut, load=instruction[10], out=aRegOut, out[0..14]=addressM);

    //D Register
    DRegister(in=outAlu, load=destD, out=dRegOut);
    // Register(in=outAlu, load=instruction[11], out=dRegOut);

    // In & Instruction Mux
    Mux16(a=aRegOut, b=inM, sel=aComp, out=directAlu);

    // ALU
    ALU(x=dRegOut, y=directAlu, 
        zx=c1, nx=c2, zy=c3, ny=c4, f=c5, no=c6, 
        out=outAlu, out=outM, zr=outZr, ng=outNg);
    

    // PC Counter
    //PC Load
    Not(in=outZr, out=noutZr);
    Not(in=outNg, out=noutNg);

    //J1
    And(a=noutZr, b=outNg, out=valueUnder0);
    And(a=valueUnder0, b=jmpLt, out=outj1);

    // //J2
    And(a=outZr, b=noutNg, out=valueIs0);
    And(a=valueIs0, b=jmpEq, out=outj2);

    // //J3
    And(a=noutZr, b=noutNg, out=valueOver0);
    And(a=valueOver0, b=jmpGt, out=outj3);

    // //Assigning PcLoad
    Or(a=outj1, b=outj2, out=orj12);
    Or(a=orj12, b=outj3, out=jmp);

    // Multiplexor that selects
    // the A-register input value for the jump address during instructions
    // that change the A-register.
    Mux16(a=aRegOut, b=aIn, sel=loadA, out=jmpAddr);

    //PC Inc can always be true. For this instance, we aren't interested in getting the same input as out. 
    // If load or reset is defined, it ignores the increment, look at diagram to understand how. 
    // If reset or load is 0, then it increments.
    // If reset or load is 1, then it ignores the incremented value.
    PC(in=jmpAddr, load=jmp, inc=true, reset=reset, out[0..14]=pc);
}